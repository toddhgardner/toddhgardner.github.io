---
import { getCollection, type CollectionEntry } from "astro:content";
import { getPulseItemId } from "../../utils/getPulseItemId";

const allPulseItems = await getCollection("pulse");

// Sort by date, newest first
const sortedItems = allPulseItems.sort(
  (a: CollectionEntry<"pulse">, b: CollectionEntry<"pulse">) =>
    b.data.publishedOn.valueOf() - a.data.publishedOn.valueOf()
);

// Get first 10 items and render their content
const items = sortedItems.slice(0, 10);
const itemsWithContent = await Promise.all(
  items.map(async (item) => {
    const { Content } = await item.render();
    return {
      pid: getPulseItemId(item),
      Content,
      ...item
    };
  })
);
const totalPages = Math.ceil(sortedItems.length / 10);
const hasNextPage = sortedItems.length > 10;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Pulse</title>
  </head>
  <body>
    <h1>Pulse</h1>

    <div class="pulse-list">
      {itemsWithContent.map((item) => (
        <article class="pulse-item">
          <time datetime={item.data.publishedOn.toISOString()}>
            {item.data.publishedOn.toLocaleString()}
          </time>
          <div class="pulse-content">
            <item.Content />
          </div>
          <a href={`/pulse/beat/${item.pid}`}>Permalink</a>
        </article>
      ))}
    </div>

    <nav class="pagination">
      <span>Page 1 of {totalPages}</span>
      {hasNextPage && (
        <a href="/pulse/2">Next â†’</a>
      )}
    </nav>
  </body>
</html>