---
import type { GetStaticPaths } from "astro";
import { getCollection, type CollectionEntry } from "astro:content";
import { getPulseItemId } from "../../utils/getPulseItemId";

export const getStaticPaths: GetStaticPaths = async () => {
  const allPulseItems = await getCollection("pulse");

  // Sort by date, newest first
  const sortedItems = allPulseItems.sort(
    (a, b) => b.data.publishedOn.valueOf() - a.data.publishedOn.valueOf()
  );

  const itemsPerPage = 10;
  const totalPages = Math.ceil(sortedItems.length / itemsPerPage);

  // Generate paths for pages 2 and onwards (page 1 is handled by index.astro)
  const paths = [];
  for (let page = 2; page <= totalPages; page++) {
    const start = (page - 1) * itemsPerPage;
    const end = start + itemsPerPage;
    const pageItems = sortedItems.slice(start, end);

    // Render content for each item
    const itemsWithContent = await Promise.all(
      pageItems.map(async (item) => {
        const { Content } = await item.render();
        return {
          pid: getPulseItemId(item),
          Content,
          ...item
        };
      })
    );

    paths.push({
      params: { page: page.toString() },
      props: {
        items: itemsWithContent,
        currentPage: page,
        totalPages,
        hasNextPage: page < totalPages,
        hasPrevPage: true
      }
    });
  }

  return paths;
};

interface Props {
  items: CollectionEntry<"pulse">[];
  currentPage: number;
  totalPages: number;
  hasNextPage: boolean;
  hasPrevPage: boolean;
}

const { items, currentPage, totalPages, hasNextPage, hasPrevPage } = Astro.props as Props;
const prevPage = currentPage === 2 ? "/pulse" : `/pulse/${currentPage - 1}`;
const nextPage = `/pulse/${currentPage + 1}`;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Pulse - Page {currentPage}</title>
  </head>
  <body>
    <h1>Pulse</h1>

    <div class="pulse-list">
      {items.map((item: any) => (
        <article class="pulse-item">
          <time datetime={item.data.publishedOn.toISOString()}>
            {item.data.publishedOn.toLocaleString()}
          </time>
          <div class="pulse-content">
            <item.Content />
          </div>
          <a href={`/pulse/beat/${item.pid}`}>Permalink</a>
        </article>
      ))}
    </div>

    <nav class="pagination">
      {hasPrevPage && (
        <a href={prevPage}>← Previous</a>
      )}
      <span>Page {currentPage} of {totalPages}</span>
      {hasNextPage && (
        <a href={nextPage}>Next →</a>
      )}
    </nav>
  </body>
</html>